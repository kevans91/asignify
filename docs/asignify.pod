=head1 NAME

asignify - cryptographically sign, verify, encrypt or decrypt files.

=head1 SYNOPSIS

B<asignify> S<[B<-q>]> verify pubkey signature

B<asignify> S<[B<-q>]> check pubkey signature file S<[file...]>

B<asignify> S<[B<-q>]> sign S<[B<-n>]> S<[B<-d>S< I<digest>>]> S<[B<-s>S< I<sshkey>>]> secretkey signature S<[file1 S<[file2...]>]>

B<asignify> S<[B<-q>]> generate S<[B<-n>]> S<[B<-p>]> S<[B<-r>S< I<rounds>>]> secretkey S<[publickey]>

B<asignify> S<[B<-q>]> encrypt S<[B<-d>]> secretkey publickey infile outfile

B<asignify> S<[B<-q>]> decrypt secretkey publickey infile outfile

=head1 DESCRIPTION

The asignify utility creates and verifies cryptographic signatures. A signature is stamped on a digests file
that contains hash digests of files using various hash functions (namely, sha256, sha512 and blake2b).

The mode of operation is selected with the following options:

=over 8

=item B<-q>

Quiet mode. Suppress informational output.

=item B<verify>

Verify signarure for a digests file (but do not verify digests themselves):

=over 12

=item B<pubkey>

Name of the file with a public key.

=item B<signature>

Name of signature file.

=back

=item B<check>

Verify a signed digests list, and then verify the checksum for each file listed in the arguments and specified in the digests list:

=over 12

=item B<pubkey>

Name of the file with a public key.

=item B<signature>

Name of a signature file.

=item B<file>

List of files whose digests need to be verified.

=back

=item B<generate>

Generate a new key pair of secret and public keys:

=over 12

=item B<-n, --no-password>

Do not ask for a passphrase during key generation. Otherwise, B<asignify> will prompt the user for a passphrase to encrypt the secret key with.

=item B<-p, --pubkey-only>

Generate just the public key component for the given secret key. This argument is not compatible with B<-s>. The B<-n> and B<-r> arguments are ignored.

=item B<-r, --rounds>

Indicate a number of iterations (rounds) used by PBKDF algorithm (default number of rounds: 10000).

=item B<-s, --ssh>

Convert B<unencrypted> ed25519 private key generated by openssh to the native asignify format. The target key could be encrypted as usually.

=item B<secretkey>

Mandatory path to file where secret key will be written, or read in the case of B<-p>.

=item B<pubkey>

Optional path to file where public key will be writed and by default will be generated from as I<[secretkey]>.pub. This option is not used with ssh keys.

=back

=item B<sign>

Calculate digests for the files specified and create a signed digests file:

=over 12

=item B<-n, --no-size>

Do not record files sizes in signature file.

=item B<-d, --digest>

Indicate a hash function which will be used for singing. Currently the asignify has support of following hashes: 
sha256(1), sha512(1), blake2 (default if none is defined). It is possible to specify multiple B<-d> options to calculate multiple
checksums for each file.

=item B<secretkey>

Name of the file with a secret key.

=item B<signature>

Name of file where signed digests will be stored.

=item B<file>

List of file(s) to calculate digests for.

=back

=item B<encrypt>

Encrypt a file using local private key and remote public key (and vice-versa for decryption):

=over 12

=item B<-d, --decrypt>

Decrypt using remote privkey and local pubkey (that is same as invoking this command as B<decrypt>)

=item B<-f, --fast>

Use faster encryption algorithm (namely chacha8 instead of chacha20). It might be useful for embedded plaforms still providing reasonable level of security.

=item B<secretkey>

Name of the file with a secret key: local for encryption and remote for decryption.

=item B<publickey>

Name of the file with a public key: remote for encryption and local for decryption.

=item B<in>

The name of input file.

=item B<out>

The name of output file.

=back


=back

=head1 EXIT STATUS

The asignify return zero exit code on success, and non-zero if an error occurs.
It may  fail because of one of the following reasons:

=over 4

=item - Some files requested are absent.

=item - Passphrase is incorrect (or passphrase and verification are not equal).

=item - The message file has been corrupted and its signature is no longer valid.

=back

=head1 EXAMPLES

F<Create a new key pair:>

 $ asignify generate keys/key.secret keys/key.public

F<Sign a file, specifying a signature name:>

 $ asignify sign -d blake2 keys/key.secret motd.sig /etc/motd

F<Verify a signature:>

 $ asignify verify keys/key.public motd.sig

F<Verify a signed digest list:>

 $ asignify check keys/key.public motd.sig /etc/motd


