.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ASIGNIFY 1"
.TH ASIGNIFY 1 "2021-02-13" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
asignify \- cryptographically sign, verify, encrypt or decrypt files.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBasignify\fR [\fB\-q\fR] verify pubkey signature
.PP
\&\fBasignify\fR [\fB\-q\fR] check pubkey signature file [file...]
.PP
\&\fBasignify\fR [\fB\-q\fR] sign [\fB\-n\fR] [\fB\-d\fR\ \fIdigest\fR] [\fB\-s\fR\ \fIsshkey\fR] secretkey signature [file1\ [file2...]]
.PP
\&\fBasignify\fR [\fB\-q\fR] generate [\fB\-n\fR] [\fB\-p\fR] [\fB\-r\fR\ \fIrounds\fR] secretkey [publickey]
.PP
\&\fBasignify\fR [\fB\-q\fR] encrypt [\fB\-d\fR] secretkey publickey infile outfile
.PP
\&\fBasignify\fR [\fB\-q\fR] decrypt secretkey publickey infile outfile
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The asignify utility creates and verifies cryptographic signatures. A signature is stamped on a digests file
that contains hash digests of files using various hash functions (namely, sha256, sha512 and blake2b).
.PP
The mode of operation is selected with the following options:
.IP "\fB\-q\fR" 8
.IX Item "-q"
Quiet mode. Suppress informational output.
.IP "\fBverify\fR" 8
.IX Item "verify"
Verify signarure for a digests file (but do not verify digests themselves):
.RS 8
.IP "\fBpubkey\fR" 12
.IX Item "pubkey"
Name of the file with a public key.
.IP "\fBsignature\fR" 12
.IX Item "signature"
Name of signature file.
.RE
.RS 8
.RE
.IP "\fBcheck\fR" 8
.IX Item "check"
Verify a signed digests list, and then verify the checksum for each file listed in the arguments and specified in the digests list:
.RS 8
.IP "\fBpubkey\fR" 12
.IX Item "pubkey"
Name of the file with a public key.
.IP "\fBsignature\fR" 12
.IX Item "signature"
Name of a signature file.
.IP "\fBfile\fR" 12
.IX Item "file"
List of files whose digests need to be verified.
.RE
.RS 8
.RE
.IP "\fBgenerate\fR" 8
.IX Item "generate"
Generate a new key pair of secret and public keys:
.RS 8
.IP "\fB\-n, \-\-no\-password\fR" 12
.IX Item "-n, --no-password"
Do not ask for a passphrase during key generation. Otherwise, \fBasignify\fR will prompt the user for a passphrase to encrypt the secret key with.
.IP "\fB\-p, \-\-pubkey\-only\fR" 12
.IX Item "-p, --pubkey-only"
Generate just the public key component for the given secret key. This argument is not compatible with \fB\-s\fR. The \fB\-n\fR and \fB\-r\fR arguments are ignored.
.IP "\fB\-r, \-\-rounds\fR" 12
.IX Item "-r, --rounds"
Indicate a number of iterations (rounds) used by \s-1PBKDF\s0 algorithm (default number of rounds: 10000).
.IP "\fB\-s, \-\-ssh\fR" 12
.IX Item "-s, --ssh"
Convert \fBunencrypted\fR ed25519 private key generated by openssh to the native asignify format. The target key could be encrypted as usually.
.IP "\fBsecretkey\fR" 12
.IX Item "secretkey"
Mandatory path to file where secret key will be written, or read in the case of \fB\-p\fR.
.IP "\fBpubkey\fR" 12
.IX Item "pubkey"
Optional path to file where public key will be writed and by default will be generated from as \fI[secretkey]\fR.pub. This option is not used with ssh keys.
.RE
.RS 8
.RE
.IP "\fBsign\fR" 8
.IX Item "sign"
Calculate digests for the files specified and create a signed digests file:
.RS 8
.IP "\fB\-n, \-\-no\-size\fR" 12
.IX Item "-n, --no-size"
Do not record files sizes in signature file.
.IP "\fB\-d, \-\-digest\fR" 12
.IX Item "-d, --digest"
Indicate a hash function which will be used for singing. Currently the asignify has support of following hashes: 
\&\fBsha256\fR\|(1), \fBsha512\fR\|(1), blake2 (default if none is defined). It is possible to specify multiple \fB\-d\fR options to calculate multiple
checksums for each file.
.IP "\fBsecretkey\fR" 12
.IX Item "secretkey"
Name of the file with a secret key.
.IP "\fBsignature\fR" 12
.IX Item "signature"
Name of file where signed digests will be stored.
.IP "\fBfile\fR" 12
.IX Item "file"
List of file(s) to calculate digests for.
.RE
.RS 8
.RE
.IP "\fBencrypt\fR" 8
.IX Item "encrypt"
Encrypt a file using local private key and remote public key (and vice-versa for decryption):
.RS 8
.IP "\fB\-d, \-\-decrypt\fR" 12
.IX Item "-d, --decrypt"
Decrypt using remote privkey and local pubkey (that is same as invoking this command as \fBdecrypt\fR)
.IP "\fB\-f, \-\-fast\fR" 12
.IX Item "-f, --fast"
Use faster encryption algorithm (namely chacha8 instead of chacha20). It might be useful for embedded plaforms still providing reasonable level of security.
.IP "\fBsecretkey\fR" 12
.IX Item "secretkey"
Name of the file with a secret key: local for encryption and remote for decryption.
.IP "\fBpublickey\fR" 12
.IX Item "publickey"
Name of the file with a public key: remote for encryption and local for decryption.
.IP "\fBin\fR" 12
.IX Item "in"
The name of input file.
.IP "\fBout\fR" 12
.IX Item "out"
The name of output file.
.RE
.RS 8
.RE
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
The asignify return zero exit code on success, and non-zero if an error occurs.
It may  fail because of one of the following reasons:
.IP "\- Some files requested are absent." 4
.IX Item "- Some files requested are absent."
.PD 0
.IP "\- Passphrase is incorrect (or passphrase and verification are not equal)." 4
.IX Item "- Passphrase is incorrect (or passphrase and verification are not equal)."
.IP "\- The message file has been corrupted and its signature is no longer valid." 4
.IX Item "- The message file has been corrupted and its signature is no longer valid."
.PD
.SH "EXAMPLES"
.IX Header "EXAMPLES"
\&\fICreate a new key pair:\fR
.PP
.Vb 1
\& $ asignify generate keys/key.secret keys/key.public
.Ve
.PP
\&\fISign a file, specifying a signature name:\fR
.PP
.Vb 1
\& $ asignify sign \-d blake2 keys/key.secret motd.sig /etc/motd
.Ve
.PP
\&\fIVerify a signature:\fR
.PP
.Vb 1
\& $ asignify verify keys/key.public motd.sig
.Ve
.PP
\&\fIVerify a signed digest list:\fR
.PP
.Vb 1
\& $ asignify check keys/key.public motd.sig /etc/motd
.Ve
